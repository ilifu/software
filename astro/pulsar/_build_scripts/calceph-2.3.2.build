#!/bin/csh

module load calceph/2.3.2

# Needs newer lmod on ilifu cluster for this to work with csh
# https://github.com/TACC/Lmod/issues/222
if ( $status != 0 ) then
   echo "calceph is currently installed using ansible"
   echo 'For example: ansible-playbook -i inventory.ini -t "calceph,calceph2.3.2"'
   exit 1
 endif

module purge

# source common.build

# set module = "calceph"
# set version = "2.3.2"
# set deps = "${omp_mod}"

# # setup modules
# module purge
# foreach dep ( $deps )
#   module load $dep
# end

# set source_dir = "${source_base}/${module}-2.3.2"
# set build_dir = "${build_base}/${module}/${version}"
# set install_dir = "${install_base}/${module}/${version}"
# set lmod_dir = "${lmod_base}/${module}"
# set lmod_file = "${lmod_dir}/${version}.lua"

# echo "Building ${module}/${version}"

# pushd $source_dir

# # create build directory
# mkdir -m 0755 -p ${build_dir}
# cd ${build_dir}

# if ( "$gcc_mod" == "gcc/11.3.0" ) then
#   set FFLAGS = "-fallow-argument-mismatch"
# else
#   set FFLAGS = ""
# endif

# echo "Configuring ... with FFLAGS=${FFLAGS}"
# setenv FCFLAGS "${FFLAGS}"
# ${source_dir}/configure --prefix=${install_dir} >& build.log
# if ( $status != 0 ) then
#   echo "configure failed: see ${build_dir}/build.log"
#   exit 1
# endif

# echo "Make clean ..."
# make clean >>& build.log
# if ( $status != 0 ) then
#   echo "make clean failed: see ${build_dir}/build.log"
#   exit 1
# endif

# echo "Make -j 32 ..."
# make -j 1 >>& build.log
# if ( $status != 0 ) then
#   echo "make failed: see ${build_dir}/build.log"
#   exit 1
# endif

# echo "Make install ..."
# make install >>& build.log
# if ( $status != 0 ) then
#   echo "make install failed: see ${build_dir}/build.log"
#   exit 1
# endif

# popd

# # setup the lmod file
# if ( ! ( -d ${lmod_dir} ) ) then
#   mkdir -m 0755  -p ${lmod_dir}
# endif

# if ( -f ${lmod_file} ) then
#   rm -f ${lmod_file}
# endif

# # use the common template
# cp common.lua.${gcc_ver} $lmod_file

# # add custom rules to the LUA
# echo 'setenv("PSRHOME_CALCEPH_PATH",pkg)' >> $lmod_file

# # add dependencies
# foreach dep ( $deps )
#   echo depends_on\(\"$dep\"\) >> $lmod_file
# end
