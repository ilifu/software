#!/bin/csh

source common.build

module purge

set deps = "${omp_mod} ${cuda_mod} ${psrchive_mod} ${psrdada_mod} ${psr_cfitsio_mod} ${fftw_mod} ${pgplot_mod} ${psrxml_mod}"
echo $deps
foreach dep ( $deps )
  module load $dep
end
# module load ${git_mod}

source build.environ

set module = "dspsr"
set source_dir = "${source_base}/${module}"

if (! -d $source_dir) then
  pushd $source_base
  git clone git://git.code.sf.net/p/dspsr/code dspsr
endif

pushd $source_dir

# If not hash, always pull latest
if ( "$1" == "latest" ) then
  ssh ${ssh_loc} "cd $source_dir; ./update"
  set version = `git rev-parse --short HEAD`
else if ( "$1" == "" ) then
  set version = `git rev-parse --short HEAD`
else
  ssh ${ssh_loc} "cd $source_dir; git fetch"
  set version = "$1"
  git checkout $version
  if ( $status != 0 ) then
    echo "GIT Checkout failed, please check version/hash"
    exit 1
  endif
endif

set build_dir = "${build_base}/${module}/${version}"
set install_dir = "${install_base}/${module}/${version}"
set lmod_dir = "${lmod_base}/${module}"
set lmod_file = "${lmod_dir}/${version}.lua"

echo "Building ${module}/${version}"

if ( -d $build_dir ) then
  rm -rf $build_dir
endif

# create build directory
mkdir -m 0755 -p ${build_dir}


# Fix some catch.hpp bugs
sed -i 's/constexpr static std::size_t sigStackSize = 32768 >= MINSIGSTKSZ ? 32768 : MINSIGSTKSZ;/constexpr static std::size_t sigStackSize = 32768;/' test/catch.hpp


echo "Bootstrapping ..."
./bootstrap >& ${build_dir}/build.log

pushd ${build_dir}

echo "apsr bpsr cpsr2 caspsr mopsr sigproc dada fits guppi kat uwb vdif" > backends.list


echo "Configuring ..."
${source_dir}/configure --prefix=${install_dir} --with-psrxml-dir=${PSRHOME_PSRXML_PATH} >& ${build_dir}/build.log

echo "make -j 64 ..."
make -j 64 >>& ${build_dir}/build.log
if ( $status != 0 ) then
  echo "make failed: see ${build_dir}/build.log"
  exit 1
endif

echo "make install ..."
make install >>& ${build_dir}/build.log
if ( $status != 0 ) then
  echo "make install failed: see ${build_dir}/build.log"
  exit 1
endif

echo "make clean"
make clean >>& ${build_dir}/build.log

popd

popd

if ( ! ( -d ${lmod_dir} ) ) then
  mkdir -p $lmod_dir
endif

if ( -f ${lmod_file} ) then
  rm -f ${lmod_file}
endif

# use the template
cp common.lua.${gcc_ver} $lmod_file

# add custom rules to the LUA
echo 'setenv("PSRHOME_DSPSR_PATH",pkg)' >> $lmod_file

# add dependencies
foreach dep ( $deps )
  echo depends_on\(\"$dep\"\) >> $lmod_file
end
