#!/bin/csh

source common.build

module purge

set deps = "${omp_mod} ${qd_mod} ${calceph_mod} ${pgplot_mod} ${gsl_mod} ${fftw_mod} ${fftw_dp_mod} ${lapack_mod} ${openblas_mod}"
echo $deps
foreach dep ( $deps )
  module load $dep
end
module load ${git_mod}

# source build.environ

# set module = "tempo2"
set source_dir = "${source_base}/${module}"

if (! -d $module ) then
  cd $source_base
  git clone https://bitbucket.org/psrsoft/tempo2.git
endif

pushd $source_dir

# If not hash, always pull latest
if ( "$1" == "latest" ) then
  cd $source_dir
  ./update
  set version = `git rev-parse --short HEAD`
else if ( "$1" == "" ) then
  set version = `git rev-parse --short HEAD`
else
  cd $source_dir
  git fetch
  set version = "$1"
  git checkout $version
  if ( $status != 0 ) then
    echo "GIT Checkout failed, please check version/hash"
    exit 1
  endif
endif

# Add the temponest version
# if (! -d TempoNest_aparthas ) then
#   ssh ${ssh_loc} "cd $source_base; git clone https://github.com/aparthas3112/TempoNest.git TempoNest_aparthas"
# endif
cd $source_base/TempoNest_aparthas
set temponest_version = `git rev-parse --short HEAD`
cd $source_base

set version = "${version}_temponest_apar_${temponest_version}"

set build_dir = "${build_base}/${module}/${version}"
set temponest_build_dir = "${build_base}/${module}/${temponest_version}"
set install_dir = "${install_base}/${module}/${version}"
set lmod_dir = "${lmod_base}/${module}"
set lmod_file = "${lmod_dir}/${version}.lua"

echo "Building ${module}/${version}"

setenv QDINSTALL ${PSRHOME_QD_PATH}
setenv FC mpif90
setenv CC mpicc
setenv CXX mpicxx
setenv F77 mpif77
#setenv CFLAGS "${CFLAGS} -I${PSRHOME_CALCEPH_PATH}/include -std=gnu++11"
#setenv CXXFLAGS "${CXXFLAGS} -I${PSRHOME_CALCEPH_PATH}/include -std=gnu++11"
setenv TEMPO2 ${install_dir}

echo "Bootstrapping ..."
./bootstrap >& ${source_dir}/build.log

# create build directory
mkdir -m 0755 -p ${build_dir}
pushd ${build_dir}

echo "Configuring ..."
set CFLAGS   = "-I${PSRHOME_CALCEPH_PATH}/include -I${PSRHOME_FFTW_SP_PATH}/include -I${PGPLOT_DIR} -std=gnu++11"
set CXXFLAGS = "-I${PSRHOME_CALCEPH_PATH}/include -I${PSRHOME_FFTW_SP_PATH}/include -I${PGPLOT_DIR} -std=gnu++11"
${source_dir}/configure --prefix=${TEMPO2} --with-calceph=${PSRHOME_CALCEPH_PATH} CFLAGS="${CFLAGS}" CXXFLAGS="${CXXFLAGS}" >& ${build_dir}/build.log

echo "make -j 32 ..."
make -j 32 >>& ${build_dir}/build.log

echo "make install ..."
make install >>& ${build_dir}/build.log
if ( $status != 0 ) then
  echo "make install failed: see ${build_dir}/build.log"
  exit 1
endif

echo "make unsupported ..."
make unsupported >>& ${build_dir}/build.log
if ( $status != 0 ) then
  echo "make unsupported failed: see ${build_dir}/build.log"
  exit 1
endif

echo "make unsupported-install ..."
make unsupported-install >>& ${build_dir}/build.log
if ( $status != 0 ) then
  echo "make unsupported-install failed: see ${build_dir}/build.log"
  exit 1
endif

echo "make plugins ..."
make plugins >>& ${build_dir}/build.log
if ( $status != 0 ) then
  echo "make plugins failed: see ${build_dir}/build.log"
  exit 1
endif

echo "make plugins-install ..."
make plugins-install >>& ${build_dir}/build.log
if ( $status != 0 ) then
  echo "make plugins-install failed: see ${build_dir}/build.log"
  exit 1
endif

echo "make clean"
make clean >>& ${build_dir}/build.log

echo "rsync -at ${source_dir}/T2runtime/* ${TEMPO2}"
rsync -at T2runtime/* ${TEMPO2}

popd

cd ${source_base}/TempoNest_aparthas

echo "Building MultiNest"

setenv MULTINEST_DIR "${source_base}/TempoNest_aparthas/MultiNest"
setenv QDINSTALL ${PSRHOME_QD_PATH}

echo "Bootstrapping ..."
./autogen.sh >& ${source_dir}/build.log

setenv FFLAGS "-fallow-argument-mismatch"

cd MultiNest
make clean
make
cp libnest3.a ../
cd ..

echo "Building PolyChord"
cd PolyChord

if (! `grep -q "FCFLAGS += -fallow-argument-mismatch" src/Makefile`) then
    sed -i '127i FCFLAGS += -fallow-argument-mismatch' src/Makefile
endif

make clean
make
cp src/libchord.a src/libchord.so ../
cd ..

echo "Building TempoNest/${temponest_version}"

setenv CXXFLAGS "${CXXFLAGS} -I${PSRHOME_FFTW_DP_PATH}/include"
setenv LDFLAGS "-L${source_dir} -L${PSRHOME_FFTW_DP_PATH}/lib -L${source_base}/TempoNest_aparthas"

if (-d $temponest_build_dir) then
  rm -rf $temponest_build_dir
endif

mkdir -m 0755 -p $temponest_build_dir
pushd $temponest_build_dir

echo "Configuring to install to ${install_dir} ..."
mkdir -p $install_dir
setenv LOGIN_ARCH linux_64
${source_base}/TempoNest_aparthas/configure --prefix=${install_dir} --with-blas=openblas >& ${temponest_build_dir}/build.log
if ( $status != 0 ) then
  echo "configure failed: see ${temponest_build_dir}/build.log"
  exit 1
endif
#${source_dir}/configure --prefix=${install_dir} >& ${build_dir}/build.log

echo "make temponest ..."
make temponest >>& ${temponest_build_dir}/build.log
if ( $status != 0 ) then
  echo "make -j 32 failed: see ${temponest_build_dir}/build.log"
  exit 1
endif

echo "make temponest-install ..."
make temponest-install >>& ${temponest_build_dir}/build.log
if ( $status != 0 ) then
  echo "make install failed: see ${temponest_build_dir}/build.log"
  exit 1
endif

# AJ 2023-10-02 this no longer seems to be necessary
# NS 2023-10-23 this seems to still be necessary
echo "renaming temponest plugin from temponest_linux_64_plug.t2 to temponest_linux_plug.t2"
mv $TEMPO2/plugins/temponest_linux_64_plug.t2  $TEMPO2/plugins/temponest_linux_plug.t2

echo "make clean"
make clean >>& ${temponest_build_dir}/build.log

cd ${source_base}

if ( ! ( -d ${lmod_dir} ) ) then
  mkdir -p $lmod_dir
endif

if ( -f ${lmod_file} ) then
  rm -f ${lmod_file}
endif

# use the template
cp common.lua.${gcc_ver} $lmod_file

# add custom rules to the LUA
echo 'setenv("PSRHOME_TEMPO2_PATH",pkg)' >> $lmod_file
echo 'setenv("TEMPO2", pkg)' >> $lmod_file

# add dependencies
foreach dep ( $deps )
  echo depends_on\(\"$dep\"\) >> $lmod_file
end
