#!/bin/csh

source common.build

module purge

set deps = "${gcc_mod} ${omp_mod} ${psr_cfitsio_mod} ${psrxml_mod} ${pgplot_mod} ${tempo2_mod} ${fftw_mod}"
foreach dep ( $deps )
  module load $dep
end
module load ${git_mod}

source build.environ

set module = "sigproc"
set source_dir = "${source_base}/${module}"

if (! -d $source_dir) then
  ssh ${ssh_loc} "cd $source_base; git clone https://github.com/SixByNine/sigproc.git"
endif

pushd $source_dir

# If not hash, always pull latest
if ( "$1" == "latest" ) then
  ssh ${ssh_loc} "cd $source_dir; ./update"
  set version = `git rev-parse --short HEAD`
else if ( "$1" == "" ) then
  set version = `git rev-parse --short HEAD`
else
  ssh ${ssh_loc} "cd $source_dir; git fetch"
  set version = "$1"
  git checkout $version
  if ( $? != 0 ) then
    echo "GIT Checkout failed, please check version/hash"
    exit 1
  endif
endif

#set build_dir = "${build_base}/${module}/${version}"
set version = "${version}"
set build_dir = "${source_base}/${module}"
set install_dir = "${install_base}/${module}/${version}"
set lmod_dir = "${lmod_base}/${module}"
set lmod_file = "${lmod_dir}/${version}.lua"

echo "Building ${module}/${version}"

echo "Bootstrapping ..."
./bootstrap >& ${source_dir}/build.log

# create build directory
mkdir -m 0755 -p ${build_dir}
pushd ${build_dir}

# Setup up compiler flags and small fixes
sed -i "s/default(none)//" src/inject_pulsar.c


set CFLAGS = "-I${PSRHOME_FFTW_SP_PATH}/include"
set FFLAGS = "-I${PSRHOME_FFTW_SP_PATH}/include"
if ( "$gcc_mod" == "gcc/11.3.0" ) then
  set FFLAGS = "${FFLAGS} -fallow-argument-mismatch -fcommon"
  set CFLAGS = "${CFLAGS} -fcommon"
endif

echo "Configuring ..."
${source_dir}/configure --prefix=${install_dir} --with-psrxml-dir=${PSRHOME_PSRXML_PATH} --with-fftw-dir=${PSRHOME_FFTW_SP_PATH} CFLAGS="${CFLAGS}" FFLAGS="${FFLAGS}" >& ${build_dir}/build.log

echo "make clean ..."
make clean >>& ${build_dir}/build.log
echo "make -j 32 ..."
make -j 32  >>& ${build_dir}/build.log
if ( $? != 0 ) then
  echo "make failed: see ${build_dir}/build.log"
  exit 1
endif

echo "make install ..."
make install >>& ${build_dir}/build.log
if ( $? != 0 ) then
  echo "make install failed: see ${build_dir}/build.log"
  exit 1
endif

echo "make clean"
make clean >>& ${build_dir}/build.log

popd

popd

if ( ! ( -d ${lmod_dir} ) ) then
  mkdir -p $lmod_dir
endif

if ( -f ${lmod_file} ) then
  rm -f ${lmod_file}
endif

# use the template
cp common.lua.${gcc_ver} $lmod_file

# add custom rules to the LUA
echo 'setenv("PSRHOME_SIGPROC_PATH",pkg)' >> $lmod_file

# add dependencies
foreach dep ( $deps )
  echo depends_on\(\"$dep\"\) >> $lmod_file
end
