- name: Install R
  vars:
    R_dir: "{{ common_dir }}/R"
    R_module_dir: "{{ common_modules }}/R"
    url: "{{ item.url }}"
    version_number: "{{ item.version_number }}"
    short_version: "{{ version_number.split('.')[0] }}.{{ version_number.split('.')[1] }}"
    checksum: "{{ item.checksum }}"
    install_dir: "{{ R_dir }}/{{ version_number }}"
    unzipdir: "/dev/shm/R-{{ version_number }}"
    build_dir: "{{ unzipdir }}/build"
    r_packages: '"argparse","data.table","devtools","DBI","mgcv","nlme","pacman","rmarkdown","Rcpp","scales","shiny","tidyverse","xtable","biocManager"'
    fribidi: "{{ item.fribidi }}"
    harfbuzz: "{{ item.harfbuzz }}"
  tags:
    - never
    - R{{ item.version_number }}
  environment:
    MAKEFLAGS: "-j {{  ansible_processor_vcpus }}"
    LD_LIBRARY_PATH: "{{ fribidi }}/lib:{{ harfbuzz }}/lib{% if 'LD_LIBRARY_PATH' in ansible_env %}:{{ ansible_env.LD_LIBRARY_PATH }}{% endif %}"
    LIBRARY_PATH: "{{ fribidi }}/lib:{{ harfbuzz }}/lib{% if 'LIBRARY_PATH' in ansible_env %}:{{ ansible_env.LIBRARY_PATH }}{% endif %}"
    PATH: "{{ fribidi }}/bin:{{ harfbuzz }}/bin:{{ install_dir }}/bin{% if 'PATH' in ansible_env %}:{{ ansible_env.PATH }}{% endif %}"
    INCLUDE: "{{ fribidi }}/include:{{ harfbuzz }}/include{% if 'INCLUDE' in ansible_env %}:{{ ansible_env.INCLUDE }}{% endif %}"
    C_INCLUDE: "{{ fribidi }}/include:{{ harfbuzz }}/include{% if 'C_INCLUDE' in ansible_env %}:{{ ansible_env.C_INCLUDE }}{% endif %}"
    PKG_CONFIG_PATH: "{{ fribidi }}/lib/pkgconfig:{{ harfbuzz }}/lib/pkgconfig{% if 'PKG_CONFIG_PATH' in ansible_env %}:{{ ansible_env.PKG_CONFIG_PATH }}{% endif %}"
  block:
    - name: Download R {{ version_number }} and install
      when: "'packages_only' not in ansible_run_tags"
      block:
        - name: Download R {{ version_number }}
          get_url:
            url: "{{ url }}"
            dest: "{{ common_src }}/R-{{ version_number }}.tar.gz"
            checksum: "{{ checksum }}"
        - name: Unzip R {{ version_number }}
          unarchive:
            src: "{{ common_src }}/R-{{ version_number }}.tar.gz"
            dest: "/dev/shm/"
            creates: "{{ unzipdir }}"
        - name: Make R {{ version_number }} build directory
          file:
            path: "{{ build_dir }}"
            state: directory
        - name: Run R {{ version_number }} configure
          command: "../configure --prefix={{ install_dir }} --enable-static --with-x=no"
          args:
            chdir: "{{ build_dir }}"
            creates: "{{ build_dir }}/Makefile"
        - name: Build R {{ version_number }}
          make:
            chdir: "{{ build_dir }}"
        - name: Install R {{ version_number }}
          make:
            chdir: "{{ build_dir }}"
            target: install
            jobs: "{{ ansible_processor_count }}"
        - name: Ensure Rprofile.site is up-to-date
          lineinfile:
            path: "{{ install_dir }}/lib/R/etc/Rprofile.site"
            create: true
            line: "options(bitmapType='cairo')"
          tags: Rprofile

    - name: Install R packages {{ r_packages }}
      command: "{{ install_dir }}/bin/Rscript -e 'install.packages(c({{ r_packages }}), repos=\"http://cran.rstudio.com/\", Ncpus={{ ansible_processor_vcpus }}, user=FALSE)'"
    - name: Install Jupyter Kernel
      command: "{{ install_dir }}/bin/Rscript -e 'install.packages(\"IRkernel\", repos=\"http://cran.rstudio.com/\", user=FALSE)'"
    - name: Update jupyter kernel spec
      template:
        src: common/R.kernel.json
        dest: "{{ install_dir }}/lib/R/library/IRkernel/kernelspec/kernel.json"

    - name: Install R {{ version_number }} module
      when: "'packages_only' not in ansible_run_tags"
      block:
        - name: Check module dir
          file:
            path: "{{ R_module_dir }}"
            state: directory
            mode: u=rwx,g=rwx,o=rx
        - name: Install R {{ version_number }} module file
          template:
            src: R.lua
            dest: "{{ R_module_dir }}/{{ version_number }}.lua"
