Bootstrap: localimage
From: {{ base_container_image }}

%labels
  Maintainer Dane Kennedy
  R_Version {{ item.r_version }}
  RStudio_Version {{ item.rstudio_version }}

%help
  RStudio {{ item.rstudio_version }} container, built with R {{ item.r_version }}

%apprun R
  exec R "${@}"

%apprun Rscript
  exec Rscript "${@}"

%apprun rstudio
  if [ -z "${RSTUDIO_PASSWORD}" ]; then
    export RSTUDIO_PASSWORD=$( tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1 )
    echo "The environment variable RSTUDIO_PASSWORD was not set, so your password has been chosen for you. It's: ${RSTUDIO_PASSWORD}"
  fi
  PORT=$( python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()' )
  HOST=$( /bin/hostname )
  echo "Running rserver on port ${PORT}"
  echo "To connect to this server run this on your local machine:"
  echo "    ssh -A ${USER}@${HOST} -o \"ProxyCommand=ssh ${USER}@slurm.ilifu.ac.za nc ${HOST} 22\" -L8081:localhost:${PORT}"
  echo "then visit http://localhost:8081 in your browser and use the username \"${USER}\" to login with the password \"${RSTUDIO_PASSWORD}\""
  echo "(You may need to choose a different port (other than 8081), so remember to change this in both the ssh and browser)"
  exec rserver --auth-none 0 --auth-pam-helper rstudio_auth --secure-cookie-key-file /tmp/rstudio-server-${USER}/secure-cookie.key --www-port ${PORT} "${@}"


%runscript
  if [ -z "${RSTUDIO_PASSWORD}" ]; then
    export RSTUDIO_PASSWORD=$( tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1 )
    echo "The environment variable RSTUDIO_PASSWORD was not set, so your password has been chosen for you. It's: ${RSTUDIO_PASSWORD}"
  fi
  PORT=$( python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()' )
  HOST=$( /bin/hostname )
  echo "Running rserver on port ${PORT}"
  echo "To connect to this server run this on your local machine:"
  echo "    ssh -A ${USER}@${HOST} -o \"ProxyCommand=ssh ${USER}@slurm.ilifu.ac.za nc ${HOST} 22\" -L8081:localhost:${PORT}"
  echo "then visit http://localhost:8081 in your browser and use the username \"${USER}\" to login with the password \"${RSTUDIO_PASSWORD}\""
  echo "(You may need to choose a different port (other than 8081), so remember to change this in both the ssh and browser)"
  exec rserver --auth-none 0 --auth-pam-helper rstudio_auth --secure-cookie-key-file /tmp/rstudio-server-${USER}/secure-cookie.key --www-port ${PORT} "${@}"

%environment
  export R_VERSION={{ item.r_version }}
  export RSTUDIO_VERSION={{ item.rstudio_version }}
  export PATH=/usr/lib/rstudio-server/bin:${PATH}

# Thanks to nickjer for this! https://github.com/nickjer/singularity-rstudio/blob/master/Singularity.3.6.0
%setup
  mkdir -p ${SINGULARITY_ROOTFS}/usr/lib/rstudio-server/bin

%files
  files/rstudio_auth.sh /usr/lib/rstudio-server/bin/rstudio_auth

%post
  # Create Installation Directories and export paths. This is needed as part of post.
  # %environment scriptlet does not define these paths during %post, only after.
  export R_VERSION={{ item.r_version }}
  export RSTUDIO_VERSION={{ item.rstudio_version }}
  export DEBIAN_FRONTEND=noninteractive

  # Update apt
  apt-get update -y && apt-get dist-upgrade -y
  apt-get install -y \
    apt-utils \
    dirmngr \
    git \
    texlive \
    texlive-extra-utils \
    texlive-fonts-extra \
    texlive-latex-extra \
    texlive-pictures \
    texlive-pstricks \
    texlive-publishers \
    texlive-science \
    texlive-xetex \
    ca-certificates \
    gdebi-core \
    systemd \
    wget \

  # Add R repositories
#  echo "deb http://cran.r-project.org/bin/linux/ubuntu {{ item.base_container_version_name }}-cran40/" > /etc/apt/sources.list.d/r.list
#  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
#  apt-get update
  wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc
  add-apt-repository "deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/"

# Install R and requirements
  apt-get install -y --no-install-recommends \
    ca-certificates \
    gdebi-core \
    hdf5-tools \
    libhdf5-dev \
    libcurl4-openssl-dev \
    libnetcdf-dev \
    libssl-dev \
    libxml2-dev \
    libcairo2-dev \
    libxt-dev \
    netcdf-bin \
    patchelf \
    r-base=${R_VERSION}* \
    r-base-core=${R_VERSION}* \
    r-base-dev=${R_VERSION}* \
    r-recommended=${R_VERSION}* \
    r-base-html=${R_VERSION}* \
    r-doc-html=${R_VERSION}* \
    systemd \
    wget \

  apt-mark hold r-base*

  # Add a default CRAN mirror
  echo "options(repos = c(CRAN = 'https://cran.rstudio.com/'), download.file.method = 'libcurl')" >> /usr/lib/R/etc/Rprofile.site

  # Add a directory for host R libraries
  mkdir -p /library
  echo "R_LIBS_SITE=/library:\${R_LIBS_SITE}" >> /usr/lib/R/etc/Renviron.site

  cd /tmp
  wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-${RSTUDIO_VERSION}-amd64.deb
  gdebi -n rstudio-server-${RSTUDIO_VERSION}-amd64.deb
  rm rstudio-server-${RSTUDIO_VERSION}-amd64.deb

  # install a few basics
  Rscript -e 'install.packages(
    c(
      "data.table",
      "devtools",
      "DBI",
      "mgcv",
      "nlme",
      "pacman",
      "rmarkdown",
      "Rcpp",
      "shiny",
      "tidyverse",
      "xtable"
    ))'
  Rscript -e 'update.packages(ask=FALSE)'

  mkdir -p /var/run/rstudio-server
  chmod ugo+w /var/run/rstudio-server
  chmod +t /var/run/rstudio-server

  Rscript -e 'install.packages("BiocManager")'
  Rscript -e 'BiocManager::install(ask=FALSE, update=TRUE)'

  Rscript -e 'install.packages(
    pkgs = "bcbioRNASeq",
    repos = c(
        "https://r.acidgenomics.com",
        BiocManager::repositories()
    ),
    dependencies = TRUE
  )'

  Rscript -e 'install.packages(
    pkgs = "DESeqAnalysis",
    repos = c(
        "https://r.acidgenomics.com",
        BiocManager::repositories()
    ),
    dependencies = TRUE
  )'

  # Cleanup the container
  apt-get clean
  apt-get autoclean

%test
  R_VERSION={{ item.r_version }}
  R --version | grep -q "${R_VERSION}"
