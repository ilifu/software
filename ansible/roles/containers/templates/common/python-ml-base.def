Bootstrap: localimage
From: {{ base_container_image }}

%labels
  Maintainer Dane Kennedy
  Version {{ item.version_number }}
  CUDA_Version {{ item.cuda_version }}
  cuDNN_Version {{ item.cudnn_version }}

%help
  Python ML Base {{ item.version_number }} container with CUDA {{ item.cuda_version }}, 
  cuDNN {{ item.cudnn_version }}, and uv package manager.
  This is the base container for Python ML environments.

%apprun python
  exec python "${@}"

%apprun python3
  exec python3 "${@}"

%apprun pip
  exec pip "${@}"

%apprun pip3
  exec pip3 "${@}"


%runscript
  exec python3 "${@}"

%environment
  export CUDA_VERSION={{ item.cuda_version }}
  export CUDNN_VERSION={{ item.cudnn_version }}
  
  # CUDA paths
  export CUDA_HOME=/usr/local/cuda
  export CUDA_ROOT=/usr/local/cuda
  export PATH=/usr/local/cuda/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:${LD_LIBRARY_PATH}
  export LIBRARY_PATH=/usr/local/cuda/lib64:${LIBRARY_PATH}
  export CPATH=/usr/local/cuda/include:${CPATH}
  
  
  # OpenCV and display
  export QT_X11_NO_MITSHM=1
  export DISPLAY=:0.0

%files
  /tmp/uv-x86_64-unknown-linux-gnu/uv /usr/local/bin/uv

%post
  # Create Installation Directories and export paths. This is needed as part of post.
  # %environment scriptlet does not define these paths during %post, only after.
  export CUDA_VERSION={{ item.cuda_version }}
  export CUDNN_VERSION={{ item.cudnn_version }}
  export DEBIAN_FRONTEND=noninteractive

  # Verify uv is functional before proceeding
  echo "Checking uv installation..."
  chmod +x /usr/local/bin/uv
  /usr/local/bin/uv --version || (echo "FATAL ERROR: uv is not functional! Build cannot continue." && exit 1)
  echo "✓ uv is working properly"

  # Update apt
  apt-get update -y && apt-get upgrade -y && apt-get dist-upgrade -y

  # Install system packages for Python development and ML
  apt-get install -y \
    curl \
    python3-pip \
    python3-dev \
    python3-venv \
    libgl1-mesa-glx \
    libgl1-mesa-dev \
    libglib2.0-0 \
    libglib2.0-dev \
    ffmpeg \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    pkg-config

  # Install NVIDIA CUDA {{ item.cuda_version }}
  wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
  dpkg -i cuda-keyring_1.0-1_all.deb
  apt-get update
  
  # Install CUDA toolkit
  apt-get install -y cuda-toolkit-11-8
  
  # Install cuDNN {{ item.cudnn_version }}
  apt-get install -y libcudnn8={{ item.cudnn_version }}.* libcudnn8-dev={{ item.cudnn_version }}.*

  # Set up CUDA paths for compilation
  export CUDA_HOME=/usr/local/cuda
  export CUDA_ROOT=/usr/local/cuda
  export PATH=/usr/local/cuda/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:${LD_LIBRARY_PATH}
  export LIBRARY_PATH=/usr/local/cuda/lib64:${LIBRARY_PATH}
  export CPATH=/usr/local/cuda/include:${CPATH}

  echo "✓ CUDA {{ item.cuda_version }}, cuDNN {{ item.cudnn_version }}, and uv are ready for Python ML environments"

  # Cleanup the container
  apt-get clean
  apt-get autoclean
  rm -f cuda-keyring_1.0-1_all.deb

%test
  # Test basic components
  python3 --version
  /usr/local/bin/uv --version
  nvcc --version || echo "CUDA test completed"