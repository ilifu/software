Bootstrap: localimage
From: {{ base_container_image }}

%labels
  Maintainer Dane Kennedy
  Version {{ item.version_number }}
  Base_Version {{ item.base_version }}
  Python_Version {{ item.python_version }}
  TensorFlow_Version {{ item.tensorflow_version }}

%help
  Python ML {{ item.version_number }} container for machine learning and data science.
  Built with Python {{ item.python_version }}, TensorFlow {{ item.tensorflow_version }},
  and a comprehensive ML/data science stack.
  
  Based on python-ml-base-{{ item.base_version }} with CUDA support.

%apprun python
  exec python "${@}"

%apprun python3
  exec python3 "${@}"

%apprun pip
  exec pip "${@}"

%apprun pip3
  exec pip3 "${@}"

%runscript
  exec python3 "${@}"

%environment
  export PYTHON_VERSION={{ item.python_version }}
  export TENSORFLOW_VERSION={{ item.tensorflow_version }}
  export TORCH_VERSION={{ item.torch_version }}
  export TRANSFORMERS_VERSION={{ item.transformers_version }}
  export PYTHON_ML_VERSION={{ item.version_number }}
  
  # Virtual environment paths
  export VIRTUAL_ENV=/opt/python-ml-env
  export PATH=/opt/python-ml-env/bin:${PATH}
  export PYTHONPATH=/opt/python-ml-env/lib/python{{ item.python_version }}/site-packages:${PYTHONPATH}
  
  # Shared model cache paths
  export HF_HOME=/software/common/models
  export TRANSFORMERS_CACHE=/software/common/models
  export SENTENCE_TRANSFORMERS_HOME=/software/common/models
  export TORCH_HOME=/software/common/models

%post
  # Create Installation Directories and export paths. This is needed as part of post.
  # %environment scriptlet does not define these paths during %post, only after.
  export PYTHON_VERSION={{ item.python_version }}
  export TENSORFLOW_VERSION={{ item.tensorflow_version }}
  export DEBIAN_FRONTEND=noninteractive

  echo "Creating Python ML environment with TensorFlow {{ item.tensorflow_version }}"
  
  # Create virtual environment using uv (inherited from base container)
  cd /opt
  /usr/local/bin/uv venv python-ml-env --python python3
  cd python-ml-env

  # Activate virtual environment and install packages
  export VIRTUAL_ENV=/opt/python-ml-env
  export PATH=/opt/python-ml-env/bin:$PATH

  # Install Python packages with specific versions using uv
  echo "Installing core ML packages..."
  /usr/local/bin/uv pip install \
    tensorflow=={{ item.tensorflow_version }} \
    opencv-python-headless=={{ item.opencv_version }} \
    numpy=={{ item.numpy_version }} \
    pandas=={{ item.pandas_version }} \
    matplotlib=={{ item.matplotlib_version }} \
    seaborn=={{ item.seaborn_version }} \
    Pillow=={{ item.pillow_version }} \
    scikit-learn=={{ item.sklearn_version }} \
    requests=={{ item.requests_version }} \
    ipywidgets \
    ipykernel

  # Install PyTorch ecosystem
  echo "Installing PyTorch ecosystem..."
  /usr/local/bin/uv pip install \
    torch=={{ item.torch_version }} \
    torchvision=={{ item.torchvision_version }} \
    torchaudio=={{ item.torchaudio_version }} \
    --index-url https://download.pytorch.org/whl/cu118

  # Install JAX ecosystem
  echo "Installing JAX ecosystem..."
  /usr/local/bin/uv pip install \
    "jax[cuda12]=={{ item.jax_version }}" \
    flax=={{ item.flax_version }}

  # Install LLM and NLP frameworks
  echo "Installing LLM and NLP frameworks..."
  /usr/local/bin/uv pip install \
    transformers=={{ item.transformers_version }} \
    sentence-transformers=={{ item.sentence_transformers_version }} \
    tokenizers \
    datasets \
    accelerate \
    langchain=={{ item.langchain_version }} \
    langchain-community \
    llamaindex \
    spacy=={{ item.spacy_version }} \
    nltk \
    gensim

  # Install MLOps and experiment tracking
  echo "Installing MLOps tools..."
  /usr/local/bin/uv pip install \
    optuna=={{ item.optuna_version }} \
    wandb=={{ item.wandb_version }} \
    mlflow \
    shap \
    lime \
    imbalanced-learn \
    peft

  # Install computer vision and visualization
  echo "Installing enhanced CV and visualization..."
  /usr/local/bin/uv pip install \
    albumentations \
    timm \
    mahotas \
    plotly=={{ item.plotly_version }} \
    bokeh \
    streamlit=={{ item.streamlit_version }} \
    dash \
    polars \
    "dask[complete]"

  # Install specialized libraries
  echo "Installing specialized ML libraries..."
  /usr/local/bin/uv pip install \
    prophet \
    tslearn \
    diffusers \
    vllm \
    fastai

  # Install additional useful ML/data science packages
  echo "Installing additional ML/data science packages..."
  /usr/local/bin/uv pip install \
    scipy \
    statsmodels \
    xgboost \
    lightgbm \
    catboost \
    joblib \
    tqdm \
    h5py \
    tables \
    pyarrow \
    openpyxl \
    xlrd

  # Install Python kernel for Jupyter from virtual environment
  echo "Installing Jupyter kernel..."
  /opt/python-ml-env/bin/python -m ipykernel install --sys-prefix --name python-ml --display-name "Python ML {{ item.version_number }} (Python {{ item.python_version }})"

  # Verify installations using virtual environment
  echo "Verifying package installations..."
  /opt/python-ml-env/bin/python -c "import tensorflow as tf; print(f'TensorFlow version: {tf.__version__}')"
  /opt/python-ml-env/bin/python -c "import cv2; print(f'OpenCV version: {cv2.__version__}')"
  /opt/python-ml-env/bin/python -c "import numpy as np; print(f'NumPy version: {np.__version__}')"
  /opt/python-ml-env/bin/python -c "import pandas as pd; print(f'Pandas version: {pd.__version__}')"
  /opt/python-ml-env/bin/python -c "import sklearn; print(f'scikit-learn version: {sklearn.__version__}')"

  # Verify additional frameworks
  echo "Verifying enhanced frameworks..."
  /opt/python-ml-env/bin/python -c "import torch; print(f'PyTorch version: {torch.__version__}')"
  /opt/python-ml-env/bin/python -c "import jax; print(f'JAX version: {jax.__version__}')"
  /opt/python-ml-env/bin/python -c "import transformers; print(f'Transformers version: {transformers.__version__}')"
  /opt/python-ml-env/bin/python -c "import sentence_transformers; print('Sentence Transformers imported successfully')"
  /opt/python-ml-env/bin/python -c "import langchain; print('LangChain imported successfully')"
  /opt/python-ml-env/bin/python -c "import spacy; print(f'SpaCy version: {spacy.__version__}')"

  # Test CUDA availability
  echo "Testing CUDA availability..."
  /opt/python-ml-env/bin/python -c "import tensorflow as tf; print('TensorFlow CUDA available:', tf.config.list_physical_devices('GPU'))"
  /opt/python-ml-env/bin/python -c "import torch; print('PyTorch CUDA available:', torch.cuda.is_available())"

  echo "âœ“ Python ML environment {{ item.version_number }} ready!"

%test
  # Test Python and key packages using virtual environment
  /opt/python-ml-env/bin/python --version
  /opt/python-ml-env/bin/python -c "import tensorflow as tf; print('TensorFlow version:', tf.__version__)"
  /opt/python-ml-env/bin/python -c "import cv2; print('OpenCV version:', cv2.__version__)"
  /opt/python-ml-env/bin/python -c "import numpy as np; print('NumPy version:', np.__version__)"
  /opt/python-ml-env/bin/python -c "import pandas as pd; print('Pandas version:', pd.__version__)"
  /opt/python-ml-env/bin/python -c "import matplotlib; print('Matplotlib version:', matplotlib.__version__)"
  /opt/python-ml-env/bin/python -c "import seaborn; print('Seaborn version:', seaborn.__version__)"
  /opt/python-ml-env/bin/python -c "import PIL; print('Pillow version:', PIL.__version__)"
  /opt/python-ml-env/bin/python -c "import sklearn; print('scikit-learn version:', sklearn.__version__)"
  /opt/python-ml-env/bin/python -c "import requests; print('Requests version:', requests.__version__)"
  
  # Test IPython kernel
  /opt/python-ml-env/bin/python -c "import ipykernel; print('IPython kernel installed successfully')"
  
  # Test CUDA (if available)
  /opt/python-ml-env/bin/python -c "import tensorflow as tf; print('CUDA devices:', tf.config.list_physical_devices('GPU'))" || echo "CUDA test completed (GPU may not be available in build environment)"